{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { EMPTY, forkJoin } from 'rxjs';\nimport { map, mergeMap, catchError, tap } from 'rxjs/operators';\nimport { ChatParticipantActions } from './chat-participant.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/chat-participant.service\";\nimport * as i3 from \"@angular/router\";\nexport let ChatParticipantEffects = /*#__PURE__*/(() => {\n  class ChatParticipantEffects {\n    // remove timestamp chat-participants in the database\n\n    /*removeTimestampChatParticipant$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(ChatParticipantActions.REMOVE_TIMESTAMP_CHAT_PARTICIPANT_API),\r\n            mergeMap((data: {type: string, payload: ChatParticipant[]}) =>\r\n            forkJoin([...data.payload.map((cP) =>{if(!(this.deleteOldPosts(cP.createdAt ))) this.chatParticipantService.deleteChatParticipant(cP.id)})])\r\n              .pipe(\r\n                map(() => ({ type: ChatParticipantActions.REMOVE_TIMESTAMP_CHAT_PARTICIPANT_STATE })),\r\n                catchError(() => EMPTY)\r\n              ))\r\n            )\r\n        }, {dispatch: true}\r\n      )*/\n    constructor(actions$, chatParticipantService, router) {\n      this.actions$ = actions$;\n      this.chatParticipantService = chatParticipantService;\n      this.router = router; // get list of chat participants in the external API\n      // set retrieved chat participant list in the state\n\n      this.getChatParticipants$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ChatParticipantActions.GET_CHAT_PARTICIPANT_LIST), mergeMap(() => this.chatParticipantService.getChatParticipants().pipe( //tap((chatParticipants: ChatParticipant[])=>{console.log(chatParticipants)}),\n\n        /*map((chatParticipants: ChatParticipant[]) =>{\r\n                                return (chatParticipants.filter((chatParticipant: ChatParticipant) =>{\r\n                                return this.deleteOldPosts(chatParticipant.createdAt )}))}),*/\n        map(chatParticipants => ({\n          type: ChatParticipantActions.SET_CHAT_PARTICIPANT_LIST,\n          chatParticipants\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // add chat-participants in the database\n\n      this.addChatParticipant$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ChatParticipantActions.ADD_CHAT_PARTICIPANT_API), mergeMap(data => this.chatParticipantService.addChatParticipant(data.payload).pipe(map(chatParticipants => ({\n          type: ChatParticipantActions.ADD_CHAT_PARTICIPANT_STATE,\n          chatParticipant: data.payload\n        })), tap(() => this.router.navigate([\"chat-participants\"])), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n      this.modifyChatParticipant$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ChatParticipantActions.MODIFY_CHAT_PARTICIPANT_API), mergeMap(data => this.chatParticipantService.updateChatParticipant(data.payload.id, data.payload).pipe(map(chatParticipants => ({\n          type: ChatParticipantActions.MODIFY_CHAT_PARTICIPANT_STATE,\n          chatParticipant: data.payload\n        })), tap(() => this.router.navigate([\"chat-participants\"])), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove chat-participants in the database\n\n      this.removeChatParticipant$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ChatParticipantActions.REMOVE_CHAT_PARTICIPANT_API), mergeMap(data => this.chatParticipantService.deleteChatParticipant(data.payload).pipe(map(() => ({\n          type: ChatParticipantActions.REMOVE_CHAT_PARTICIPANT_STATE,\n          chatParticipantId: data.payload\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove all chat-participants in the database\n\n      this.removeAllChatParticipant$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ChatParticipantActions.REMOVE_ALL_CHAT_PARTICIPANT_API), mergeMap(data => forkJoin([...data.payload.map(id => this.chatParticipantService.deleteChatParticipant(id))]).pipe(map(() => ({\n          type: ChatParticipantActions.REMOVE_ALL_CHAT_PARTICIPANT_STATE\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n    }\n\n    deleteOldPosts(postDate) {\n      let nowDate = new Date();\n      let nowUtc = Date.UTC(nowDate.getUTCFullYear(), nowDate.getUTCMonth(), nowDate.getUTCDate(), nowDate.getUTCHours(), nowDate.getUTCMinutes(), nowDate.getUTCSeconds());\n      let tempNowUtc = new Date(nowUtc).toISOString().replace(\"T\", \" \"); //delete older than one hour\n\n      return postDate.slice(0, 13) == tempNowUtc.slice(0, 13);\n    }\n\n  }\n\n  ChatParticipantEffects.ɵfac = function ChatParticipantEffects_Factory(t) {\n    return new (t || ChatParticipantEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ChatParticipantService), i0.ɵɵinject(i3.Router));\n  };\n\n  ChatParticipantEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatParticipantEffects,\n    factory: ChatParticipantEffects.ɵfac\n  });\n  return ChatParticipantEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}