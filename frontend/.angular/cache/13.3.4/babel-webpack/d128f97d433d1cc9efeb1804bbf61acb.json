{"ast":null,"code":"import { catchError, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ChatParticipantService = /*#__PURE__*/(() => {\n  class ChatParticipantService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getChatParticipants() {\n      return this.http.get(`${environment.apiURL}/chat-participants`).pipe(tap(data => data),\n      /*map((chatParticipants: ChatParticipant[]) =>{\r\n          return (chatParticipants.filter((chatParticipant: ChatParticipant) =>{\r\n          return this.deleteOldPosts(chatParticipant.createdAt )}))}),*/\n      //tap((data: ChatParticipant[]) => console.log(\"data: \"+data)),\n      catchError(err => throwError(() => err)));\n    } //first condition was this: chatParticipant.createdAt<\"2024-06-03 13:20:00 UTC\";\n\n\n    deleteOldPosts(postDate) {\n      let nowDate = new Date();\n      let nowUtc = Date.UTC(nowDate.getUTCFullYear(), nowDate.getUTCMonth(), nowDate.getUTCDate(), nowDate.getUTCHours(), nowDate.getUTCMinutes(), nowDate.getUTCSeconds());\n      let tempNowUtc = new Date(nowUtc).toISOString().replace(\"T\", \" \"); //delete older than one hour\n\n      return postDate.slice(0, 13) == tempNowUtc.slice(0, 13);\n    }\n\n    getChatParticipant(id) {\n      return this.http.get(`${environment.apiURL}/chat-participants/${id}`).pipe(tap(data => data), catchError(err => throwError(() => err)));\n    }\n\n    addChatParticipant(chatParticipant) {\n      return this.http.post(`${environment.apiURL}/chat-participants`, chatParticipant).pipe(tap(data => data), catchError(err => throwError(() => err)));\n    }\n\n    updateChatParticipant(id, chatParticipant) {\n      return this.http.put(`${environment.apiURL}/chat-participants/${id}`, chatParticipant).pipe(catchError(err => throwError(() => err)));\n    }\n\n    deleteChatParticipant(id) {\n      return this.http.delete(`${environment.apiURL}/chat-participants/${id}`).pipe(catchError(err => throwError(() => err)));\n    }\n\n  }\n\n  ChatParticipantService.ɵfac = function ChatParticipantService_Factory(t) {\n    return new (t || ChatParticipantService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ChatParticipantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatParticipantService,\n    factory: ChatParticipantService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatParticipantService;\n})();","map":null,"metadata":{},"sourceType":"module"}