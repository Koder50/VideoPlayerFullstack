{"ast":null,"code":"import { CommandBarActions } from '../../enums/command-bar-actions.enum';\nimport { VideoPlayerActions } from '../../state/video-player.actions';\nimport { VideoPlayerHistoricalActions } from '../../../video-player-historical/state/video-player-historical.actions';\nimport { selectVideoPlayers } from '../../state/video-player.selectors';\nimport { selectVideoPlayersHistorical } from '../../../video-player-historical/state/video-player-historical.selectors';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"../../components/video-player-command-bar/video-player-command-bar.component\";\nimport * as i4 from \"../../components/video-player-list/video-player-list.component\";\nexport let ListComponent = /*#__PURE__*/(() => {\n  class ListComponent {\n    constructor(router, store) {\n      this.router = router;\n      this.store = store; // sample data of video player\n\n      this.videoPlayers = [];\n      this.videoPlayers$ = this.store.select(selectVideoPlayers());\n      this.videoPlayersHistorical = [];\n      this.videoPlayersHistorical$ = this.store.select(selectVideoPlayersHistorical());\n      this.subscription = Subscription.EMPTY;\n    }\n\n    ngOnInit() {\n      this.store.dispatch({\n        type: VideoPlayerActions.GET_VIDEO_PLAYER_LIST\n      });\n      this.assignVideoPlayers();\n      this.store.dispatch({\n        type: VideoPlayerHistoricalActions.GET_VIDEO_PLAYER_HISTORICAL_LIST\n      });\n      this.assignVideoPlayersHistorical();\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n    assignVideoPlayers() {\n      this.subscription = this.videoPlayers$.subscribe(data => {\n        this.videoPlayers = data;\n      });\n    }\n\n    assignVideoPlayersHistorical() {\n      this.subscription = this.videoPlayersHistorical$.subscribe(data => {\n        this.videoPlayersHistorical = data;\n      });\n    }\n\n    executeCommandBarAction(action) {\n      switch (action) {\n        case CommandBarActions.DeleteHistory:\n          {\n            this.store.dispatch({\n              type: VideoPlayerHistoricalActions.GET_VIDEO_PLAYER_HISTORICAL_LIST\n            });\n            this.assignVideoPlayersHistorical();\n            this.deleteVideoPlayersHistoricalElement(1);\n            return;\n          }\n\n        case CommandBarActions.Logout:\n          {\n            localStorage.removeItem('token');\n            localStorage.removeItem('userEmail');\n            this.router.navigate(['']);\n            return;\n          }\n\n        default:\n          \"\";\n      }\n    }\n\n    deleteVideoPlayersHistoricalElement(i) {\n      for (let j = 0; j < this.videoPlayersHistorical.length; j++) {\n        if (this.videoPlayersHistorical[j].watchedUser == localStorage.getItem(\"userEmail\")) {\n          this.store.dispatch({\n            type: VideoPlayerHistoricalActions.REMOVE_VIDEO_PLAYER_HISTORICAL_API,\n            payload: this.videoPlayersHistorical[j].id\n          });\n          this.videoPlayersHistorical = this.videoPlayersHistorical.filter(v => v.id != this.videoPlayersHistorical[j].id);\n          this.store.dispatch({\n            type: VideoPlayerHistoricalActions.GET_VIDEO_PLAYER_HISTORICAL_LIST\n          });\n          j = this.videoPlayersHistorical.length;\n          if (this.videoPlayersHistorical.length != 0) this.deleteVideoPlayersHistoricalElement(1);\n        }\n      }\n    }\n\n  }\n\n  ListComponent.ɵfac = function ListComponent_Factory(t) {\n    return new (t || ListComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.Store));\n  };\n\n  ListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListComponent,\n    selectors: [[\"app-list\"]],\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"action\"], [3, \"videoPlayers\", \"videoPlayersHistorical\"]],\n    template: function ListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-video-player-command-bar\", 0);\n        i0.ɵɵlistener(\"action\", function ListComponent_Template_app_video_player_command_bar_action_0_listener($event) {\n          return ctx.executeCommandBarAction($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(1, \"app-video-player-list\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"videoPlayers\", ctx.videoPlayers)(\"videoPlayersHistorical\", ctx.videoPlayersHistorical);\n      }\n    },\n    directives: [i3.VideoPlayerCommandBarComponent, i4.VideoPlayerListComponent],\n    styles: [\"button[_ngcontent-%COMP%]{margin-right:10px}[_nghost-%COMP%]  .mat-toolbar-row, [_nghost-%COMP%]  .mat-toolbar-single-row{border-radius:15px}\"]\n  });\n  return ListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}