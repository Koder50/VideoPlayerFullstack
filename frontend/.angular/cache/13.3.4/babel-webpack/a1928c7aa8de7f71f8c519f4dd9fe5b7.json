{"ast":null,"code":"import { catchError, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let VideoPlayerService = /*#__PURE__*/(() => {\n  class VideoPlayerService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getVideoPlayers() {\n      return this.http.get(`${environment.apiURL}/video-players`).pipe(tap(data => data), catchError(err => throwError(() => err)));\n    }\n\n    getVideoPlayer(id) {\n      return this.http.get(`${environment.apiURL}/video-players/${id}`).pipe(tap(data => data), catchError(err => throwError(() => err)));\n    }\n\n    addVideoPlayer(videoPlayer) {\n      return this.http.post(`${environment.apiURL}/video-players`, videoPlayer).pipe(tap(data => data), catchError(err => throwError(() => err)));\n    }\n\n    updateVideoPlayer(id, videoPlayer) {\n      return this.http.put(`${environment.apiURL}/video-players/${id}`, videoPlayer).pipe(catchError(err => throwError(() => err)));\n    }\n\n    deleteVideoPlayer(id) {\n      return this.http.delete(`${environment.apiURL}/video-players/${id}`).pipe(catchError(err => throwError(() => err)));\n    }\n\n  }\n\n  VideoPlayerService.ɵfac = function VideoPlayerService_Factory(t) {\n    return new (t || VideoPlayerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  VideoPlayerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VideoPlayerService,\n    factory: VideoPlayerService.ɵfac,\n    providedIn: 'root'\n  });\n  return VideoPlayerService;\n})();","map":null,"metadata":{},"sourceType":"module"}