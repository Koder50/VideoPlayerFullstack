{"ast":null,"code":"import { CommandBarActions } from '../../enums/command-bar-actions.enum';\nimport { TableActions } from '../../enums/table-actions.enum';\nimport { ChatParticipantActions } from '../../state/chat-participant.actions';\nimport { selectChatParticipants } from '../../state/chat-participant.selectors';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"../../components/chat-participant-command-bar/chat-participant-command-bar.component\";\nimport * as i4 from \"../../components/chat-participant-list/chat-participant-list.component\";\nexport let ListComponent = /*#__PURE__*/(() => {\n  class ListComponent {\n    constructor(router, store) {\n      this.router = router;\n      this.store = store; // sample data of anti hero\n\n      this.chatParticipants = [];\n      this.chatParticipants$ = this.store.select(selectChatParticipants());\n      this.subscription = Subscription.EMPTY;\n      this.headers = [{\n        headerName: \"Speaker\",\n        fieldName: \"speaker\"\n      }, {\n        headerName: \"Content\",\n        fieldName: \"talkContent\"\n      }];\n    }\n\n    ngOnInit() {\n      localStorage.setItem(\"mainPage\", 'true');\n      localStorage.setItem('refresh', 'true');\n      this.store.dispatch({\n        type: ChatParticipantActions.GET_CHAT_PARTICIPANT_LIST\n      });\n      this.assignChatParticipants();\n      setInterval(() => {\n        if (localStorage.getItem(\"mainPage\") == \"true\" && localStorage.getItem(\"refresh\") == 'true') {\n          this.store.dispatch({\n            type: ChatParticipantActions.GET_CHAT_PARTICIPANT_LIST\n          });\n        }\n      }, 5000);\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n    assignChatParticipants() {\n      this.subscription = this.chatParticipants$.subscribe(data => {\n        this.chatParticipants = data;\n      });\n    }\n\n    selectChatParticipant(data) {\n      switch (data.action) {\n        case TableActions.View:\n          {\n            this.router.navigate(['chat-participants', 'form', data.chatParticipant.id]);\n            return;\n          }\n\n        case TableActions.Delete:\n          {\n            this.store.dispatch({\n              type: ChatParticipantActions.REMOVE_CHAT_PARTICIPANT_API,\n              payload: data.chatParticipant.id\n            });\n            return;\n          }\n\n        default:\n          \"\";\n      }\n    }\n\n    executeCommandBarAction(action) {\n      switch (action) {\n        case CommandBarActions.Create:\n          {\n            this.router.navigate([\"chat-participants\", \"form\"]);\n            return;\n          }\n\n        case CommandBarActions.DeleteAll:\n          {\n            this.store.dispatch({\n              type: ChatParticipantActions.REMOVE_ALL_CHAT_PARTICIPANT_API,\n              payload: [...this.chatParticipants.map(d => d.id)]\n            });\n            return;\n          }\n\n        case CommandBarActions.Logout:\n          {\n            localStorage.removeItem('token');\n            localStorage.removeItem('userEmail');\n            this.refresh();\n            return;\n          }\n\n        case CommandBarActions.Refresh:\n          {\n            if (localStorage.getItem('refresh') == 'true') localStorage.setItem('refresh', 'false');else localStorage.setItem('refresh', 'true');\n            return;\n          }\n\n        default:\n          \"\";\n      }\n    }\n\n    refresh() {\n      window.location.reload();\n    }\n\n  }\n\n  ListComponent.ɵfac = function ListComponent_Factory(t) {\n    return new (t || ListComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.Store));\n  };\n\n  ListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListComponent,\n    selectors: [[\"app-list\"]],\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"action\"], [3, \"chatParticipants\", \"headers\", \"chatParticipant\"]],\n    template: function ListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-chat-participant-command-bar\", 0);\n        i0.ɵɵlistener(\"action\", function ListComponent_Template_app_chat_participant_command_bar_action_0_listener($event) {\n          return ctx.executeCommandBarAction($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(1, \"app-chat-participant-list\", 1);\n        i0.ɵɵlistener(\"chatParticipant\", function ListComponent_Template_app_chat_participant_list_chatParticipant_1_listener($event) {\n          return ctx.selectChatParticipant($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"chatParticipants\", ctx.chatParticipants)(\"headers\", ctx.headers);\n      }\n    },\n    directives: [i3.ChatParticipantCommandBarComponent, i4.ChatParticipantListComponent],\n    styles: [\"button[_ngcontent-%COMP%]{margin-right:10px}\"]\n  });\n  return ListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}