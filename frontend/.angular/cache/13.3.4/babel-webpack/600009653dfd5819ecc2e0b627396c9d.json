{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { EMPTY, forkJoin } from 'rxjs';\nimport { map, mergeMap, catchError, tap } from 'rxjs/operators';\nimport { VideoPlayerActions } from './video-player.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/video-player.service\";\nimport * as i3 from \"@angular/router\";\nexport let VideoPlayerEffects = /*#__PURE__*/(() => {\n  class VideoPlayerEffects {\n    constructor(actions$, videoPlayerService, router) {\n      this.actions$ = actions$;\n      this.videoPlayerService = videoPlayerService;\n      this.router = router; // get list of video players in the external API\n      // set retrieved video player list in the state\n\n      this.getVideoPlayers$ = createEffect(() => {\n        return this.actions$.pipe(ofType(VideoPlayerActions.GET_VIDEO_PLAYER_LIST), mergeMap(() => this.videoPlayerService.getVideoPlayers().pipe(map(videoPlayers => ({\n          type: VideoPlayerActions.SET_VIDEO_PLAYER_LIST,\n          videoPlayers\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // add video-players in the database\n\n      this.addVideoPlayer$ = createEffect(() => {\n        return this.actions$.pipe(ofType(VideoPlayerActions.ADD_VIDEO_PLAYER_API), mergeMap(data => this.videoPlayerService.addVideoPlayer(data.payload).pipe(map(videoPlayers => ({\n          type: VideoPlayerActions.ADD_VIDEO_PLAYER_STATE,\n          videoPlayer: data.payload\n        })), tap(() => this.router.navigate([\"video-players\"])), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n      this.modifyVideoPlayer$ = createEffect(() => {\n        return this.actions$.pipe(ofType(VideoPlayerActions.MODIFY_VIDEO_PLAYER_API), mergeMap(data => this.videoPlayerService.updateVideoPlayer(data.payload.id, data.payload).pipe(map(videoPlayers => ({\n          type: VideoPlayerActions.MODIFY_VIDEO_PLAYER_STATE,\n          videoPlayer: data.payload\n        })), tap(() => this.router.navigate([\"video-players\"])), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove video-players in the database\n\n      this.removeVideoPlayer$ = createEffect(() => {\n        return this.actions$.pipe(ofType(VideoPlayerActions.REMOVE_VIDEO_PLAYER_API), mergeMap(data => this.videoPlayerService.deleteVideoPlayer(data.payload).pipe(map(() => ({\n          type: VideoPlayerActions.REMOVE_VIDEO_PLAYER_STATE,\n          videoPlayerId: data.payload\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove all video-players in the database\n\n      this.removeAllVideoPlayer$ = createEffect(() => {\n        return this.actions$.pipe(ofType(VideoPlayerActions.REMOVE_ALL_VIDEO_PLAYER_API), mergeMap(data => forkJoin([...data.payload.map(id => this.videoPlayerService.deleteVideoPlayer(id))]).pipe(map(() => ({\n          type: VideoPlayerActions.REMOVE_ALL_VIDEO_PLAYER_STATE\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n    }\n\n  }\n\n  VideoPlayerEffects.ɵfac = function VideoPlayerEffects_Factory(t) {\n    return new (t || VideoPlayerEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.VideoPlayerService), i0.ɵɵinject(i3.Router));\n  };\n\n  VideoPlayerEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VideoPlayerEffects,\n    factory: VideoPlayerEffects.ɵfac\n  });\n  return VideoPlayerEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}