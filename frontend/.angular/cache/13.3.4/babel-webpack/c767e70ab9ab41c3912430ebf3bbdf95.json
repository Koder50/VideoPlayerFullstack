{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { EMPTY, forkJoin } from 'rxjs';\nimport { map, mergeMap, catchError, tap } from 'rxjs/operators';\nimport { VideoPlayerHistoricalActions } from './video-player-historical.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/video-player-historical.service\";\nimport * as i3 from \"@angular/router\";\nexport let VideoPlayerHistoricalEffects = /*#__PURE__*/(() => {\n  class VideoPlayerHistoricalEffects {\n    constructor(actions$, videoPlayerHistoricalService, router) {\n      this.actions$ = actions$;\n      this.videoPlayerHistoricalService = videoPlayerHistoricalService;\n      this.router = router; // get list of video players historical in the external API\n      // set retrieved video player historical list in the state\n\n      this.getVideoPlayersHistorical$ = createEffect(() => {\n        return this.actions$.pipe(ofType(VideoPlayerHistoricalActions.GET_VIDEO_PLAYER_HISTORICAL_LIST), mergeMap(() => this.videoPlayerHistoricalService.getVideoPlayersHistorical().pipe(map(videoPlayersHistorical => videoPlayersHistorical.filter(videoPlayerHistorical => videoPlayerHistorical.watchedUser == localStorage.getItem(\"userEmail\"))), map(videoPlayersHistorical => ({\n          type: VideoPlayerHistoricalActions.SET_VIDEO_PLAYER_HISTORICAL_LIST,\n          videoPlayersHistorical\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // add video-players-historical in the database\n\n      this.addVideoPlayerHistorical$ = createEffect(() => {\n        return this.actions$.pipe(ofType(VideoPlayerHistoricalActions.ADD_VIDEO_PLAYER_HISTORICAL_API), mergeMap(data => this.videoPlayerHistoricalService.addVideoPlayerHistorical(data.payload).pipe(map(videoPlayersHistorical => ({\n          type: VideoPlayerHistoricalActions.ADD_VIDEO_PLAYER_HISTORICAL_STATE,\n          videoPlayerHistorical: data.payload\n        })), tap(() => this.router.navigate([\"video-players\"])), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n      this.modifyVideoPlayerHistorical$ = createEffect(() => {\n        return this.actions$.pipe(ofType(VideoPlayerHistoricalActions.MODIFY_VIDEO_PLAYER_HISTORICAL_API), mergeMap(data => this.videoPlayerHistoricalService.updateVideoPlayerHistorical(data.payload.id, data.payload).pipe(map(videoPlayersHistorical => ({\n          type: VideoPlayerHistoricalActions.MODIFY_VIDEO_PLAYER_HISTORICAL_STATE,\n          videoPlayerHistorical: data.payload\n        })), tap(() => this.router.navigate([\"video-players\"])), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove video-players in the database\n\n      this.removeVideoPlayerHistorical$ = createEffect(() => {\n        return this.actions$.pipe(ofType(VideoPlayerHistoricalActions.REMOVE_VIDEO_PLAYER_HISTORICAL_API), mergeMap(data => this.videoPlayerHistoricalService.deleteVideoPlayerHistorical(data.payload).pipe(map(() => ({\n          type: VideoPlayerHistoricalActions.REMOVE_VIDEO_PLAYER_HISTORICAL_STATE,\n          videoPlayerHistoricalId: data.payload\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove all video-players in the database\n\n      this.removeAllVideoPlayerHistorical$ = createEffect(() => {\n        return this.actions$.pipe(ofType(VideoPlayerHistoricalActions.REMOVE_ALL_VIDEO_PLAYER_HISTORICAL_API), mergeMap(data => forkJoin([...data.payload.map(id => this.videoPlayerHistoricalService.deleteVideoPlayerHistorical(id))]).pipe(map(() => ({\n          type: VideoPlayerHistoricalActions.REMOVE_ALL_VIDEO_PLAYER_HISTORICAL_STATE\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n    }\n\n  }\n\n  VideoPlayerHistoricalEffects.ɵfac = function VideoPlayerHistoricalEffects_Factory(t) {\n    return new (t || VideoPlayerHistoricalEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.VideoPlayerHistoricalService), i0.ɵɵinject(i3.Router));\n  };\n\n  VideoPlayerHistoricalEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VideoPlayerHistoricalEffects,\n    factory: VideoPlayerHistoricalEffects.ɵfac\n  });\n  return VideoPlayerHistoricalEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}